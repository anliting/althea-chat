Object.entries({"main.js":";(async()=>{\n    ;(await module.importByPath('lib/general.static.js',{mode:1}))(module)\n    module.repository.Chat=module.shareImport('Chat.js')\n    let[\n        chatPage,\n    ]=await Promise.all([\n        module.shareImport('main/chatPage.js'),\n    ])\n    module.arguments.userId==undefined?\n        chatPage.showConversationList()\n    :\n        chatPage.showChatRoom(module.arguments.userId)\n})()\n","Chat/Room/Ui.js":"module.repository.compile=module.shareImport('Ui/compile.js')\n;(async()=>{\n    let[\n        dom,\n        compile,\n        createMessage,\n        createSingleMessage,\n        createBottom,\n        StyleManager,\n        colorScheme,\n    ]=await Promise.all([\n        module.repository.althea.dom,\n        module.repository.compile,\n        module.shareImport('Ui/createMessage.js'),\n        module.shareImport('Ui/createSingleMessage.js'),\n        module.shareImport('Ui/createBottom.js'),\n        module.shareImport('Ui/StyleManager.js'),\n        module.shareImport('Ui/colorScheme.js'),\n    ])\n    function Ui(currentUser,getSetting,setSetting){\n        this._currentUser=currentUser\n        this._styleManager=new StyleManager\n        this.getSetting=getSetting\n        this.setSetting=setSetting\n        this.users={}\n        this.node=dom('div',\n            {className:'chat'},\n            this.messageDiv=createMessage(this),\n            this.bottomDiv=createBottom(this)\n        )\n        this._changeButtonDisplay(\n            '_bottomTexButton',\n            this.getSetting('showTexButton')\n        )\n        this._changeButtonDisplay(\n            '_bottomSendButton',\n            this.getSetting('showSendButton')\n        )\n    }\n    Ui.prototype._push=function(){\n        this._settingsButton.disabled=true\n    }\n    Ui.prototype._pop=function(){\n        this._settingsButton.disabled=false\n    }\n    Ui.prototype._changeButtonDisplay=function(button,display){\n        this[button].style.display=display?'':'none'\n    }\n    Ui.prototype._changeTextareaValue=function(v){\n        this.textarea.value=v\n        this._updatePreview()\n        this.updateTextareaHeight()\n    }\n    Ui.prototype._updatePreview=async function(){\n        dom(this._previewNode,\n            {innerHTML:''},\n            await compile(this.textarea.value)\n        )\n        this.syncInnerMessageDivScroll()\n    }\n    Ui.prototype._send=function(){\n        if(this.textarea.value=='')\n            return\n        this.sendMessage(this.textarea.value)\n        this.textarea.value=''\n        this._updatePreview()\n    }\n    Ui.prototype.beAppended=function(){\n        this.updateMessageDivHeight()\n    }\n    Ui.prototype.focus=function(){\n        this.textarea.focus()\n    }\n    Ui.prototype.updateMessageDivHeight=function(){\n        this.messageDiv.style.height=`calc(100% - 8px - ${\n            this.bottomDiv.clientHeight+2\n        }px)`\n    }\n    Ui.prototype.updateTextareaHeight=function(){\n        let rows=Math.max(2,Math.min(4,\n            this.textarea.value.split('\\n').length\n        ))\n        this.textarea.rows=rows\n        this.updateMessageDivHeight()\n        this.syncInnerMessageDivScroll()\n    }\n    Ui.prototype.prepend=async function(messages){\n        return uiAddMessages.call(this,messages,'prepend')\n    }\n    Ui.prototype.append=async function(messages){\n        return uiAddMessages.call(this,messages,'append')\n    }\n    Ui.prototype._queryOlder=function(){\n        this.queryOlder()\n    }\n    Ui.prototype.changeStyle=function(id){\n        if(this._style!=undefined)\n            this._styleManager.remove(this._style)\n        this._style=this._styleManager.insert({\n            id,\n            content:colorScheme[id].style,\n        })\n    }\n    Object.defineProperty(Ui.prototype,'style',{set(val){\n        this._styleManager.forEach=val\n    },get(){\n        return this._styleManager.forEach\n    }})\n    Object.defineProperty(Ui.prototype,'connectionStatus',{set(val){\n        this._connectionStatus=val\n        this._statusNode.textContent=val=='online'?'':'offline'\n    }})\n    async function uiAddMessages(messages,mode){\n        let insert\n        if(mode=='prepend'){\n            messages=messages.slice()\n            messages.reverse()\n            insert=div=>this._topDiv.after(div)\n        }else if(mode=='append'){\n            insert=div=>this._previewNode.before(div)\n        }\n        messages.map(message=>\n            insert(createSingleMessage(this,message).n)\n        )\n        this.syncInnerMessageDivScroll()\n    }\n    return Ui\n})()\n","Chat/Room/prototype.ui.js":"(async()=>{\n    let Ui=await module.shareImport('Ui.js')\n    return{get(){\n        if(this._ui)\n            return this._ui\n        if(this.getSetting('colorScheme')==undefined)\n            this.setSetting('colorScheme','default')\n        if(this.getSetting('notificationSound')==undefined)\n            this.setSetting('notificationSound',0)\n        if(this.getSetting('pressEnterToSend')==undefined)\n            this.setSetting('pressEnterToSend',false)\n        if(this.getSetting('showTexButton')==undefined)\n            this.setSetting('showTexButton',false)\n        if(this.getSetting('showSendButton')==undefined)\n            this.setSetting('showSendButton',true)\n        let ui=new Ui(this._currentUser,this.getSetting,(k,v)=>{\n            this.setSetting(k,v)\n            if(k=='colorScheme')\n                ui.changeStyle(v)\n        })\n        ui.queryOlder=()=>this._getMessages('before')\n        ui.sendMessage=m=>this._sendMessage(m)\n        ui.playNotificationSound=this.playNotificationSound\n        ui.imageUploader=this._imageUploader\n        ui.connectionStatus=this._connectionStatus\n        ui.changeStyle(this.getSetting('colorScheme'))\n        return this._ui=ui\n    }}\n})()\n","Chat/Room/Ui/compile/katex.js":"(async()=>{\n    let\n        root='https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.7.1'\n        styleSheetUrl=`${root}/katex.min.css`,\n        scriptUrl=`${root}/katex.min.js`\n    let o={}\n    await module.share({window:o}).importByPath(scriptUrl,{mode:1})\n    return{\n        styleSheet:styleSheetUrl,\n        katex:o.katex,\n    }\n})()\n","Chat/Room/Ui/setupSettingsButton.js":";(async()=>{\n    let[\n        dom,\n        colorScheme,\n    ]=await Promise.all([\n        module.repository.althea.dom,\n        module.shareImport('colorScheme.js'),\n    ])\n    function setupSettingsButton(ui){\n        ui._settingsButton=dom('button','Settings',{onclick(e){\n            ui._push()\n            let bF=dom.createBF()\n            dom(ui.node,bF.node)\n            bF.appendChild(createSettingsDiv(ui))\n            bF.on('backClick',e=>{\n                ui.node.removeChild(bF.node)\n                ui._pop()\n            })\n        }})\n    }\n    function createSettingsDiv(ui){\n        return dom('div',\n            n=>{\n                n.style.margin='16px 24px'\n                n.style.width='280px'\n            },\n            notificationSound(ui),\n            colorSchemeP(ui),\n            dom('p',\n                dom('label',\n                    dom('input',{\n                        type:'checkbox',\n                        checked:ui.getSetting('pressEnterToSend'),\n                        onchange(e){\n                            ui.setSetting('pressEnterToSend',this.checked)\n                        }\n                    }),' Press Enter to send.')\n            ),\n            dom('p',\n                dom('label',\n                    dom('input',{\n                        type:'checkbox',\n                        checked:ui.getSetting('showTexButton'),\n                        onchange(e){\n                            ui.setSetting('showTexButton',this.checked)\n                            ui._changeButtonDisplay(\n                                '_bottomTexButton',\n                                this.checked\n                            )\n                        }\n                    }),' Show `Tex\\' button.')\n            ),\n            dom('p',\n                dom('label',\n                    dom('input',{\n                        type:'checkbox',\n                        checked:ui.getSetting('showSendButton'),\n                        onchange(e){\n                            ui.setSetting('showSendButton',this.checked)\n                            ui._changeButtonDisplay(\n                                '_bottomSendButton',\n                                this.checked\n                            )\n                        }\n                    }),' Show `Send\\' button.')\n            )\n        )\n    }\n    function notificationSound(ui){\n        return dom('p',\n            'Notification Sound: ',\n            dom('input',{\n                type:'range',\n                max:1,\n                step:0.01,\n                value:ui.getSetting('notificationSound'),\n                onchange(e){\n                    ui.setSetting('notificationSound',this.value)\n                    ui.playNotificationSound()\n                }\n            })\n        )\n    }\n    function colorSchemeP(ui){\n        let s=ui.getSetting('colorScheme')\n        return dom('p',\n            'Color Scheme: ',\n            dom('select',\n                ...Object.keys(colorScheme).map(i=>\n                    dom('option',{value:i},colorScheme[i].name,n=>{\n                        if(s==i)\n                            n.selected=true\n                    })\n                ),\n                {onchange(e){\n                    ui.setSetting('colorScheme',this.value)\n                }}\n            )\n        )\n    }\n    return setupSettingsButton\n})()\n","Chat/Room/Ui/createBottom/setUpVim.js":"(async()=>{\n    let\n        dom=await module.repository.althea.dom,\n        loadVim=()=>module.importByPath(`${\n            'https://gitcdn.link/cdn/anliting/webvim'\n        }/${\n            '585df5a6d6daa30dc78af958804f658c163dfe59'\n        }/src/Vim.static.js`,{mode:1})\n    async function load(ui,textarea){\n        if(typeof loadVim=='function')\n            loadVim=loadVim()\n        textarea.disabled=true\n        let Vim=await loadVim\n        let vim=new Vim(p=>{\n            if(p=='~/.vimrc')\n                return localStorage.webvimVimrc\n        }),viewDiv=createViewDiv(vim)\n        vim.text=textarea.value\n        vim._cursor.moveTo(textarea.selectionStart)\n        dom(document.head,vim.style)\n        dom(document.body,viewDiv)\n        vim.polluteCopy\n        vim.focus()\n        vim.on('quit',e=>{\n            document.head.removeChild(vim.style)\n            document.body.removeChild(viewDiv)\n            textarea.disabled=false\n            textarea.focus()\n        })\n        vim.write=p=>{\n            if(p==undefined){\n                ui._changeTextareaValue(vim.text)\n                textarea.selectionStart=textarea.selectionEnd=\n                    vim.cursor\n            }else if(p=='~/.vimrc')\n                localStorage.webvimVimrc=vim.text\n        }\n    }\n    function createViewDiv(vim){\n        vim.width=80\n        vim.height=24\n        return dom('div',\n            vim.node,\n            {onclick(){\n                vim.focus()\n            }},\n            n=>{dom(n.style,{\n                position:'fixed',\n                left:'50%',\n                top:'50%',\n                transform:'translate(-50%,-50%)',\n                width:'min-content',\n                zIndex:'3'\n            })}\n        )\n    }\n    return load\n})()\n","Chat/Room/Ui/StyleManager.js":"function StyleManager(){\n    this._style=[]\n}\nStyleManager.prototype.insert=function(content){\n    let s={content}\n    if(this._forEach)\n        s.rollback=this._forEach(s.content)\n    this._style.push(s)\n    return this._style.length-1\n}\nStyleManager.prototype.remove=function(id){\n    let s=this._style[id]\n    if(this._forEach)\n        s.rollback()\n    this._style.splice(id,1)\n}\nObject.defineProperty(StyleManager.prototype,'forEach',{set(forEach){\n    this._forEach=forEach\n    this._style.map(forEach?\n        s=>s.rollback=forEach(s.content)\n    :\n        s=>s.rollback()\n    )\n},get(){\n    return this._forEach\n}})\nStyleManager\n","Chat/Room/Ui/createBottom.legacy.js":"/*async function fullscreen(div){\n    if((await module.repository.althea.browser).isMobile){\n        dom(div,' ',createFullscreenButton())\n    }\n    function createFullscreenButton(){\n        let\n            status=0,\n            n=dom('button')\n        updateTextContent()\n        n.onclick=e=>{\n            status=1-status\n            updateTextContent()\n            if(status==0)\n                document.webkitExitFullscreen()\n            else\n                document.body.webkitRequestFullscreen()\n        }\n        function updateTextContent(){\n            n.textContent=['Fullscreen','Window'][status]\n        }\n        return n\n    }\n}*/\n","Chat/Room/Ui/createSingleMessage.js":";(async()=>{\n    let[\n        compile,\n        dom,\n    ]=await Promise.all([\n        module.repository.compile,\n        module.repository.althea.dom,\n    ])\n    return createSingleMessageNode\n    function createSingleMessageNode(ui,message){\n        let\n            n=dom('p'),\n            p=(async()=>{\n                let a=await(ui.users[message.fromUser]).finalA\n                let span=await createSpan(message)\n                dom(n,a,': ',span.span)\n                ui.syncInnerMessageDivScroll()\n                await span.promise\n                ui.syncInnerMessageDivScroll()\n            })()\n        return{n,p}\n    }\n    async function createSpan(message){\n        let span=dom('span',\n            {title:(new Date(message.timestamp)).toLocaleString()},\n            await compile(message.message)\n        )\n        return{\n            span,\n            promise:Promise.all(\n                [...span.getElementsByTagName('img')].map(img=>\n                    new Promise((rs,rj)=>{\n                        img.addEventListener('load',rs)\n                        img.addEventListener('error',rs)\n                    })\n                )\n            )\n        }\n    }\n})()\n","Chat/Room/Ui/createMessage.js":"(async()=>{\n    let[\n        dom,\n    ]=await Promise.all([\n        module.repository.althea.dom,\n    ])\n    return createMessageDiv\n    function createMessageDiv(ui){\n        function syncDivScroll(){\n            if(ui.atBottom)\n                div.scrollTop=div.scrollHeight\n        }\n        function updateAtBottom(){\n            ui.atBottom=Math.abs(\n                div.scrollTop+div.clientHeight-div.scrollHeight\n            )<=1\n        }\n        let div=dom('div',\n            {\n                className:'message',\n                onscroll:updateAtBottom,\n                onclick(e){\n                    getSelection().isCollapsed&&ui.textarea.focus()\n                },\n            },\n            ui._topDiv=createTopDiv(ui),\n            ui._previewNode=dom('div',{className:'preview'})\n        )\n        updateAtBottom()\n        ui.syncInnerMessageDivScroll=syncDivScroll\n        return ui._innerMessageDiv=div\n    }\n    function createTopDiv(ui){\n        return dom('div',\n            {className:'top'},\n            createShowOlderMessagesButton(ui)\n        )\n    }\n    function createShowOlderMessagesButton(ui){\n        return dom('button',{onclick(e){\n            e.stopPropagation()\n            ui._queryOlder()\n        }},'Show Older Messages')\n    }\n})()\n","Chat/Room/Ui/createBottom.js":";(async()=>{\n    let[\n        arg,\n        dom,\n        setupSettingsButton,\n        setUpVim,\n    ]=await Promise.all([\n        module.repository.althea.arg,\n        module.repository.althea.dom,\n        module.shareImport('setupSettingsButton.js'),\n        module.shareImport('createBottom/setUpVim.js'),\n    ])\n    function createTextarea(ui){\n        let textarea=dom('textarea',{\n            rows:2,\n            title:'Alt+V: Open the Web Vim editor.',\n            oninput(e){\n                ui.updateTextareaHeight()\n                ui._updatePreview()\n            }\n        })\n        textarea.onkeydown=e=>{\n            let pdsp=_=>{e.stopPropagation(),e.preventDefault()}\n            if(\n                ui.getSetting('pressEnterToSend')&&\n                !e.ctrlKey&&!e.shiftKey&&e.key=='Enter'\n            ){\n                pdsp()\n                return ui._send()\n            }\n            if(e.altKey&&e.key.toLowerCase()=='v'){\n                pdsp()\n                return setUpVim(ui,textarea)\n            }\n        }\n        ;(async()=>{\n            let user=await ui._currentUser\n            await user.load('nickname')\n            textarea.placeholder=`${user.nickname}: `\n        })()\n        return textarea\n    }\n    function setupFileButton(ui){\n        ui._fileButton=dom.createFileButton('Image')\n        ui._fileButton.on('file',async a=>{\n            ui._fileButton.n.disabled=true\n            let imageIds=await ui.imageUploader.uploadImages(a)\n            imageIds.map(id=>{\n                ui.textarea.value+=\n                    `<img src=img/${id}c800x600.jpg>\\n`\n            })\n            ui._updatePreview()\n            ui.updateTextareaHeight()\n            ui._fileButton.n.disabled=false\n        })\n    }\n    function setupStatusNode(ui){\n        ui._statusNode=dom('span')\n    }\n    function createSendButton(ui){\n        return dom('button','Send',{onclick(){\n            ui._send()\n        }})\n    }\n    function createBottom(ui){\n        setupFileButton(ui)\n        setupSettingsButton(ui)\n        setupFindButton(ui)\n        setupStatusNode(ui)\n        return dom('div',\n            {className:'bottom'},\n            ui.textarea=createTextarea(ui),\n            arg.h&&[ui._findButton,' '],\n            ui._bottomTexButton=createTexButton(ui),' ',\n            ui._fileButton.n,' ',\n            ui._bottomSendButton=createSendButton(ui),' ',\n            ui._settingsButton,' ',\n            ui._statusNode\n        )\n    }\n    function createTexButton(ui){\n        return dom('button','TeX',{\n            title:`\nWhen you click this button, it places \\`<span class=tex>' and \\`</span>' around your selection in the input.\n`,\n            onclick(e){\n                let\n                    s=ui.textarea.value,\n                    a=ui.textarea.selectionStart,\n                    b=ui.textarea.selectionEnd,\n                    stepForward='<span class=tex>'.length\n                ui.textarea.value=`${s.substring(0,a)}<span class=tex>${\n                    s.substring(a,b)\n                }</span>${s.substring(b)}`\n                ui.textarea.selectionStart=a+stepForward\n                ui.textarea.selectionEnd=b+stepForward\n                ui.textarea.focus()\n                ui._updatePreview()\n            }\n        })\n    }\n    function setupFindButton(ui){\n        ui._findButton=dom('button','Find')\n    }\n    return createBottom\n})()\n","Chat/Room/Ui/compile.js":"let whitelist={\n    a:{\n        href:/^https?:\\/\\//,\n    },\n    br:{},\n    code:{\n        style:0,\n    },\n    div:{\n        style:0,\n    },\n    iframe:{\n        width:0,\n        height:0,\n        src:/^https:\\/\\/www\\.youtube\\.com\\/embed\\//,\n        frameborder:0,\n        allowfullscreen:0,\n    },\n    img:{\n        src:/^img\\//,\n        style:0,\n    },\n    p:{\n        style:0,\n    },\n    pre:{\n        style:0,\n    },\n    span:{\n        class:0,\n        style:0,\n    },\n}\n/*\n    To support the math typesetting function, one may\n        . implement it from scratch,\n        . use the KaTeX library, or\n        . use the MathJax library.\n    2017-05-05:\n        I chosed the KaTeX approach, because I don't want to implement it\n        myself, and with KaTeX, I know how to solve the problem in a much\n        proper way by the comparison of MathJax.\n*/\n;(async()=>{\n    let[\n        dom,\n        uri,\n    ]=await Promise.all([\n        module.repository.althea.dom,\n        module.repository.althea.uri,\n    ]),dynamic={\n        katex:{\n            async load(){\n                let katex=await module.shareImport('compile/katex.js')\n                // pollution\n                dom(document.head,\n                    dom('link',{\n                        rel:'stylesheet',\n                        href:katex.styleSheet\n                    })\n                )\n                return katex\n            }\n        }\n    }\n    function load(name){\n        let o=dynamic[name]\n        return o.value||(o.value=o.load())\n    }\n    async function compile(s){\n        let body=(new DOMParser).parseFromString(\n            `<!docytpe html><title>0</title><body>${s}`,'text/html'\n        ).body\n        await traverse(body)\n        return[...body.childNodes]\n    }\n    async function traverse(m){\n        await Promise.all([...m.childNodes].map(async n=>{\n            if(!test(n))\n                return m.removeChild(n)\n            if(n.nodeType==1){\n                if(n.className=='tex'){\n                    let s=n.textContent\n                    n.textContent=''\n                    try{\n                        let katex=await load('katex')\n                        katex.katex.render(s,n)\n                    }catch(e){\n                        n.textContent=s\n                    }\n                }else\n                    traverse(n)\n            }else if(n.nodeType==3){\n                for(let o of renderUrl(n.wholeText))\n                    m.insertBefore(o,n)\n                m.removeChild(n)\n            }\n        }))\n    }\n    function test(n){\n        if(n.nodeType==1){\n            let name=n.nodeName.toLowerCase()\n            if(!(name in whitelist))\n                return\n            let nodeTest=whitelist[name]\n            return[...n.attributes].every(a=>{\n                if(!(a.name in nodeTest))\n                    return \n                let attrTest=nodeTest[a.name]\n                if(attrTest==0)\n                    return true\n                return attrTest.test(a.value)\n            })\n        }else if(n.nodeType==3)\n            return 1\n    }\n    function*renderUrl(s){\n        for(let m;m=uri.matchAbsoluteUri(s);){\n            yield dom.tn(s.substring(0,m.index))\n            yield /^https?/.test(m[0])?\n                dom('a',decodeURI(m[0]),{href:m[0]})\n            :\n                dom.tn(m[0])\n            s=s.substring(m.index+m[0].length)\n        }\n        yield dom.tn(s)\n    }\n    return compile\n})()\n","Chat/Room/Ui.legacy.js":"/*\n    //let mathjaxPath='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS_HTML'\n    /*if(typeof MathJax=='undefined')\n        await new Promise(onload=>\n            dom(document.head,\n                dom('script',{type:'text/x-mathjax-config'},`\nMathJax.Hub.Config({\n    messageStyle:'none',\n    skipStartupTypeset:true,\n})\n                `),\n                dom('script',{\n                    src:mathjaxPath,\n                    onload,\n                })\n            )\n        )*/\n            /*MathJax.Hub.Queue(['Typeset',MathJax.Hub,res.n])\n            this.syncInnerMessageDivScroll()*/\n*/\n","Chat/Room/Ui/colorScheme.js":"(async()=>{\n    let browser=await module.repository.althea.browser\n    let colorScheme={\n        'default':{\n            name:'Default',\n            style:`\ndiv.chat>div.message>div.preview{\n    color:gray;\n}\n${!browser.isMobile?`\ndiv.chat>div.message::-webkit-scrollbar{\n    width:12px;\n}\ndiv.chat>div.message::-webkit-scrollbar-track{\n    border-radius:6px;\n    background:#DDD;\n}\ndiv.chat>div.message::-webkit-scrollbar-thumb{\n    border-radius:6px;\n    background:#BBB;\n}\n`:''}`,\n        },\n        'gnulinux':{\n            name:'GNU/Linux',\n            style:`\ndiv.chat>div.message>div.preview{\n    color:dimgray;\n}\ndiv.chat a:active,div.chat a:link,div.chat a:hover,div.chat a:visited{\n    color:lightblue;\n}\ndiv.chat button{\n    background-color:black;\n    color:lightgray;\n}\ndiv.chat>div.message{\n    background-color:black;\n    color:lightgray;\n}\ndiv.chat>div.message a.user{\n    color:lightgray;\n}\ndiv.chat>div.bottom textarea{\n    background-color:black;\n    color:lightgray;\n}\n${!browser.isMobile?`\ndiv.chat>div.message::-webkit-scrollbar{\n    width:12px;\n}\ndiv.chat>div.message::-webkit-scrollbar-track{\n    border-radius:6px;\n    background:#222;\n}\ndiv.chat>div.message::-webkit-scrollbar-thumb{\n    border-radius:6px;\n    background:#444;\n}\n`:''}\n`,\n        }\n    }\n    return colorScheme\n})()\n","Chat/Room/style.css":"div.chat>div.message{\n    margin-bottom:8px;\n}\ndiv.chat>div.message{\n    padding-right:8px;\n    height:100%;\n    overflow-y:scroll;\n    overflow-wrap:break-word;\n/*\n    In Chrome 57, 'word-break:break-all' is causing\n    'overflow-wrap:break-word' not to break 'a lot of continuous \"！\"'. I\n    considered it as a browser bug.\n\n    It also results in horizontal scroll.\n*/\n    /*word-break:break-all;*/\n    /*text-align:justify;*/\n}\ndiv.chat>div.message>div.top{\n    text-align:center;\n}\ndiv.chat>div.message a.user{\n    color:black;\n    text-decoration:none;\n}\ndiv.chat>div.message img{\n    max-width:60%;\n}\ndiv.chat>div.bottom>textarea{\n    width:calc(100% - 6px);\n    resize:none;\n}\n/* start fullscreen */\n/*body:-webkit-full-screen{\n    margin:0;\n    width:100%;\n    height:100%;\n    background-color:white;\n}\nbody:-webkit-full-screen>.chat{\n    padding:8px;\n    width:calc(100% - 16px);\n    height:calc(100% - 16px);\n    background-color:white;\n}*/\n/* end fullscreen */\n","Chat/Room/style.mobile.css":"","Chat/Room/style.desktop.css":"","Chat/Room.js":";(async()=>{\n    let\n        [\n            dom,\n            EventEmmiter,\n            ui,\n            style,\n            deviceSpecificStyle,\n        ]=await Promise.all([\n            module.repository.althea.dom,\n            module.repository.althea.EventEmmiter,\n            module.shareImport('Room/prototype.ui.js'),\n            module.get('Room/style.css'),\n            getDeviceSpecificStyle(),\n        ]),\n        blockSize=16\n    async function getDeviceSpecificStyle(){\n        let browser=await module.repository.althea.browser\n        return await module.get(`Room/style.${\n            browser.isMobile?'mobile':'desktop'\n        }.css`)\n    }\n    function Room(\n        send,\n        createSession,\n        getUser,\n        imageUploader,\n        conversationId,\n        currentUser,\n        target\n    ){\n        EventEmmiter.call(this)\n        this._sendFunction=send\n        this._createSession=createSession\n        this._getUser=getUser\n        this._imageUploader=imageUploader\n        this._conversationId=conversationId\n        this._currentUser=currentUser\n        this._messages=[]\n        ;(async()=>{\n            await this._getMessages('before')\n            let session=this._createSession()\n            session.send({\n                function:       'listenMessages',\n                conversation:   (await this._conversationId),\n                after:          roomCalcAfter.call(this),\n            })\n            session.onMessage=doc=>{\n                let res=doc.value\n                if(this._ui)\n                    roomAddMessagesToUi.call(this,'append',res)\n                this._messages=this._messages.concat(res)\n                if(res.length)\n                    this.emit('append')\n            }\n        })()\n    }\n    Object.setPrototypeOf(Room.prototype,EventEmmiter.prototype)\n    Room.prototype._getMessagesData=async function(){\n        let\n            chat=this\n        let doc={\n            function:       'getMessages',\n            conversation:   (await this._conversationId),\n        }\n        doc.after=0\n        doc.before=calcBefore()\n        doc.last=blockSize\n        return this._send(doc)\n        function calcBefore(){\n            return chat._messages.length==0?\n                0\n            :\n                chat._messages[0].id\n        }\n    }\n    function roomCalcAfter(){\n        return this._messages.length==0?\n            0\n        :\n            this._messages[this._messages.length-1].id+1\n    }\n    Room.prototype._getMessages=async function(){\n        if(this._getMessagesPromise)\n            return\n        this._getMessagesPromise=this._getMessagesData()\n        try{\n            let res=await this._getMessagesPromise\n            if(res.length){\n                res.sort((a,b)=>a.id-b.id)\n                if(this._ui)\n                    roomAddMessagesToUi.call(this,'prepend',res)\n                this._messages=res.concat(this._messages)\n            }\n        }catch(e){}\n        delete this._getMessagesPromise\n    }\n    Room.prototype._sendMessage=async function(message){\n        return this._send({\n            function:       'sendMessage',\n            conversation:   (await this._conversationId),\n            message,\n        })\n    }\n    Room.prototype._send=async function(doc){\n        return this._sendFunction(doc)\n    }\n    Object.defineProperty(Room.prototype,'connectionStatus',{set(val){\n        this._connectionStatus=val\n        if(this._ui)\n            this._ui.connectionStatus=val\n    }})\n    Room.prototype.style=style+deviceSpecificStyle\n    Object.defineProperty(Room.prototype,'ui',ui)\n    async function roomAddMessagesToUi(mode,messages){\n        await Promise.all(messages.map(async row=>{\n            this._ui.users[row.fromUser]=await this._getUser(row.fromUser)\n        }))\n        this._ui[mode](messages)\n    }\n    return Room\n})()\n","Chat.js":"(async()=>{\n    let Room=await module.shareImport('Chat/Room.js')\n    return{\n        Room\n    }\n})()\n","main/chatPage.js":"(async()=>{\n    let[\n        createChatRoom,\n        mainStyle,\n        showConversationList,\n        dom,\n    ]=await Promise.all([\n        module.shareImport('createChatRoom.js'),\n        module.get('style.css'),\n        module.shareImport('showConversationList.js'),\n        module.repository.althea.dom,\n    ])\n    function ChatPage(){\n        this.settings=localStorage.altheaChatSettings?\n            JSON.parse(localStorage.altheaChatSettings)\n        :\n            {notificationSound:0}\n        dom(document.head,\n            this.style=dom('style',mainStyle),\n            this.themeColor=dom('meta',{name:'theme-color'})\n        )\n    }\n    ChatPage.prototype.playSound=function(settings){\n        dom(document.body,dom('audio',{\n            autoplay:true,\n            src:'plugins/althea-chat/main/notification-a.mp3',\n            onended(e){document.body.removeChild(this)},\n            volume:this.settings.notificationSound,\n        }))\n    }\n    ChatPage.prototype.showConversationList=showConversationList\n    ChatPage.prototype.showChatRoom=function(id){\n        let\n            target=getUser(id),\n            chatRoom=createChatRoom.call(\n                this,\n                target,\n                module.repository.althea.site\n            )\n        notification.call(this,chatRoom,target)\n        content.call(this,chatRoom)\n        async function getUser(id){\n            let site=await module.repository.althea.site\n            return site.getUser(id)\n        }\n    }\n    ChatPage.prototype.setSetting=function(k,v){\n        this.settings[k]=v\n        localStorage.altheaChatSettings=JSON.stringify(this.settings)\n    }\n    async function notification(chat,target){\n        await Promise.all([\n            (async()=>{\n                chat=await chat\n            })(),\n            (async()=>{\n                target=await target\n                await target.load('nickname')\n            })(),\n        ])\n        let\n            tabIsFocused=true,\n            notification=0,\n            unread=0\n        updateTitle()\n        setInterval(updateTitle,1000)\n        chat.on('append',()=>{\n            if(tabIsFocused)\n                return\n            if(unread==0)\n                notification=1\n            unread++\n            this.playSound()\n        })\n        addEventListener('focusin',e=>{\n            tabIsFocused=true\n            unread=0\n        })\n        addEventListener('focusout',e=>{\n            tabIsFocused=false\n        })\n        function updateTitle(){\n            let notiPart=unread==0?'':`${'◯⬤'[notification]} (${unread}) `\n            lazyChangeTitle(`${notiPart}↔ ${target.nickname}`)\n            notification=1-notification\n        }\n        function lazyChangeTitle(s){\n            document.title==s||(document.title=s)\n        }\n    }\n    async function content(chat){\n        chat=await chat\n        let ui=chat.ui\n        dom(this.style,await chat.style)\n        ui.style=s=>{\n            let n=dom.tn(s.content)\n            dom(this.style,n)\n            let color={\n                default:'',\n                gnulinux:'black',\n            }[s.id]\n            this.themeColor.content=color\n            document.body.style.backgroundColor=color\n            return()=>this.style.removeChild(n)\n        }\n        dom(document.body,ui.node)\n        ui.focus()\n        ui.beAppended()\n    }\n    return new ChatPage\n})()\n","main/createChatRoom.js":"async function getTwoMenConversation(s,target){\n    let site=await s\n    let id=await site.send({\n        function:'getTwoMenConversation',\n        target:(await target).id,\n    })\n    return id\n}\n;(async function createChatRoom(target,site){\n    let[\n        Chat,\n        ImageUploader,\n    ]=await Promise.all([\n        module.repository.Chat,\n        module.repository.althea.ImageUploader,\n    ])\n    site=await site\n    let chatRoom=new Chat.Room(\n        async d=>site.send(d),\n        ()=>site.createSession(),\n        async i=>site.getUser(i),\n        new ImageUploader(site),\n        getTwoMenConversation(site,target),\n        site.currentUser,\n        target\n    )\n    chatRoom.getSetting=k=>this.settings[k]\n    chatRoom.setSetting=(k,v)=>this.setSetting(k,v)\n    chatRoom.playNotificationSound=()=>this.playSound()\n    update()\n    addEventListener('offline',update)\n    addEventListener('online',update)\n    return chatRoom\n    function update(){\n        chatRoom.connectionStatus=navigator.onLine?'online':'offline'\n    }\n})\n","main/style.css":"html{\n    height:100%;\n}\nbody{\n    height:calc(100% - 16px);\n}\na:active,a:link,a:hover,a:visited{\n    color:blue;\n}\n.chat{\n    height:100%;\n    max-width:600px;\n    margin:0 auto;\n}\n.conversationList{\n    height:100%;\n    max-width:600px;\n    margin:0 auto;\n}\n/*\n    I don't know why the KaTeX makes the scroll bar appear; but this fixes\n    it on desktop version; and the mobile version does still.\n*/\nbody{\n    overflow-y:hidden;\n}\n","main/showConversationList.js":"(async()=>{\n    let[\n        dom,\n    ]=await Promise.all([\n        module.repository.althea.dom,\n    ])\n    function createConversation(site,id){\n        let\n            user=site.getUser(id),\n            tc=textContent(id)\n        return{\n            n:dom('div',createLink(id)),\n            order:tc,\n        }\n        async function textContent(id){\n            let u=await user\n            await u.load(['username','nickname'])\n            return u.nickname||u.username\n        }\n        async function createLink(id){\n            return dom('a',async n=>{\n                let u=await user\n                await u.load('username')\n                n.href=`chat/${u.username}`\n                return tc\n            })\n        }\n    }\n    return function(){\n        document.title='Conversations - Chat'\n        let n=dom('div','Conversations:',{className:'conversationList'})\n        ;(async()=>{\n            let[order,site]=await Promise.all([\n                module.repository.althea.order,\n                module.repository.althea.site,\n            ])\n            order.post(\n                (await site.send('getConversations')).map(async id=>{\n                    let c=createConversation(site,id)\n                    return{\n                        n:c.n,\n                        o:await c.order\n                    }\n                }),\n                (a,b)=>n.insertBefore(a.n,b.n),\n                e=>dom(n,e.n),\n                (a,b)=>a.o.localeCompare(b.o)<0\n            )\n        })()\n        dom(document.body,n)\n    }\n})()\n","a.js":"// https://developers.google.com/drive/v3/web/about-sdk\n(async()=>{\n    let\n        authorizeButton=document.getElementById('authorize-button'),\n        signoutButton=document.getElementById('signout-button'),\n        content=document.getElementById('content')\n    async function initClient() {\n        await gapi.client.init({\n            discoveryDocs:[\n                'https://www.googleapis.com/discovery/v1/apis/drive/v3/rest'\n            ],\n            clientId:'1040053646946-suppijprovg780dtp0h8n7q21noc5u6d.apps.googleusercontent.com',\n            scope:'https://www.googleapis.com/auth/drive.metadata.readonly'\n        })\n        gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus)\n        updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get())\n        authorizeButton.onclick=()=>\n            gapi.auth2.getAuthInstance().signIn()\n        signoutButton.onclick=()=>\n            gapi.auth2.getAuthInstance().signOut()\n    }\n    function updateSigninStatus(isSignedIn){\n        if (isSignedIn) {\n            authorizeButton.style.display='none'\n            signoutButton.style.display='block'\n            listFiles()\n        } else {\n            authorizeButton.style.display='block'\n            signoutButton.style.display='none'\n        }\n    }\n    async function listFiles(){\n        let response=await gapi.client.drive.files.list({\n            'pageSize':16,\n            'fields':'nextPageToken, files(id, name)'\n        })\n        let files=response.result.files\n        if(!files)\n            return\n        content.textContent=files.map(f=>`${f.name} (${f.id})\\n`).join('')\n    }\n    await module.scriptByPath('https://apis.google.com/js/api.js')\n    gapi.load('client:auth2',initClient)\n})()\n","a.html":"<!doctype html>\n<base href=/>\n<title>Test</title>\n<button id=authorize-button style=display:none>Authorize</button>\n<button id=signout-button style=display:none>Sign Out</button>\n<pre id=content></pre>\n<script src=lib/module/src/module.js data-main=plugins/althea-chat/a.js></script>\n"}).map(([k,v])=>module.static(k,v));;(async()=>{
    ;(await module.importByPath('lib/general.static.js',{mode:1}))(module)
    module.repository.Chat=module.shareImport('Chat.js')
    let[
        chatPage,
    ]=await Promise.all([
        module.shareImport('main/chatPage.js'),
    ])
    module.arguments.userId==undefined?
        chatPage.showConversationList()
    :
        chatPage.showChatRoom(module.arguments.userId)
})()
